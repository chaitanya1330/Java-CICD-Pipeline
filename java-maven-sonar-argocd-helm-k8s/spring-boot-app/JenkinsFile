pipeline {
    agent { label 'docker' }
    environment {
        M2_HOME = '/opt/apache-maven-3.6.3'
        M2 = "${M2_HOME}/bin"
        PATH = "${M2}:${PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/chaitanya1330/Java-CICD-Pipeline.git'
                sh 'echo passed'
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'ls -lart'
                    sh 'mvn clean package'
                }
            }
        }

      stage('SonarQube Analysis') {
            steps {
            script {
                def scannerHome = tool 'sonar-qube'
                withSonarQubeEnv('sonar-server') {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        // Run the SonarQube Scanner with project key and authentication token
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=SpringBoot-Java -Dsonar.login=sqp_5eaa6ac1d013dfd455ac05b54f09bd12f01cd0af"
                    }
                }
            }
        }
        
      }
        stage('maven deploy to nexus'){
            steps{
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                configFileProvider([configFile(fileId: '04d8d8e5-b9b8-4772-8503-86520e178763', variable: 'mavensettings')]) {
                    sh "mvn -s $mavensettings clean deploy -DskipTests=true"
                }
            }
        }}
        
        stage('Build and Push Docker Image') {
          environment {
            DOCKER_IMAGE = "chaitanyachay/javaapp:${BUILD_NUMBER}"
            // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
            REGISTRY_CREDENTIALS = credentials('docker-hub-credentials')
          }
          steps {
            script {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                docker.withRegistry('https://index.docker.io/v1/', "docker-hub-credentials") {
                    dockerImage.push()
                }
            }
          }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "iam-veeramalla"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "abhishek.xyz@gmail.com"
                        git config user.name "Abhishek Veeramalla"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
  }
}
